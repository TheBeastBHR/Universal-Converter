name: Universal Converter CI/CD

# Only run CI when code files change, ignore documentation and assets
on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.js'
      - '**.json'
      - '**.html'
      - '**.css'
      - 'manifest.json'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '**.log'
      - '**.zip'
      - '**.crx'
      - '**.png'
      - '**.jpg'
      - '**.jpeg'
      - '**.gif'
      - '**.ico'
      - 'LICENSE'
      - '.gitignore'
      - 'build/**'
      - 'dist/**'
      - 'node_modules/**'
      
  pull_request:
    branches: [ main ]
    paths:
      - '**.js'
      - '**.json'
      - '**.html'
      - '**.css'
      - 'manifest.json'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '**.log'
      - '**.zip'
      - '**.crx'
      - '**.png'
      - '**.jpg'
      - '**.jpeg'
      - '**.gif'
      - '**.ico'
      - 'LICENSE'
      - '.gitignore'
      - 'build/**'
      - 'dist/**'
      - 'node_modules/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Use Node.js 24.x
      uses: actions/setup-node@v4
      with:
        node-version: 24.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate extension structure
      run: npm run validate
      
    - name: Run unit tests
      run: npm test
      
    - name: Test extension build
      run: npm run build
      
    - name: Generate test coverage report
      run: |
        echo "Test coverage report:" > coverage.txt
        npm test >> coverage.txt 2>&1 || true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-24
        path: |
          coverage.txt
          *.log

  browser-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@latest
      
    - name: Install Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        
    - name: Run browser tests
      run: |
        # Create a simple HTML test runner
        cat > browser-test.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head><title>Unit Converter Browser Test</title></head>
        <body>
          <div id="test-results"></div>
          <script src="data/conversion-data.js"></script>
          <script src="utils/unit-converter.js"></script>
          <script src="utils/conversion-detector.js"></script>
          <script>
            console.log('Running browser compatibility test...');
            try {
              const converter = new window.UnitConverter.UnitConverter();
              const result = converter.convert(100, 'cm', 'm');
              if (Math.abs(result - 1) < 0.001) {
                console.log('✅ Browser test passed');
                document.getElementById('test-results').innerHTML = 'Browser test: PASSED';
              } else {
                console.error('❌ Browser test failed');
                document.getElementById('test-results').innerHTML = 'Browser test: FAILED';
              }
            } catch (error) {
              console.error('❌ Browser test error:', error);
              document.getElementById('test-results').innerHTML = 'Browser test: ERROR - ' + error.message;
            }
          </script>
        </body>
        </html>
        EOF
        
        # Run headless chrome test
        google-chrome --headless --disable-gpu --no-sandbox --dump-dom browser-test.html > browser-test-output.txt
        
        # Check if test passed
        if grep -q "Browser test: PASSED" browser-test-output.txt; then
          echo "✅ Browser compatibility test passed"
        else
          echo "❌ Browser compatibility test failed"
          cat browser-test-output.txt
          exit 1
        fi

  security-check:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check for security issues
      run: |
        echo "Running security checks..."
        
        # Check for common security issues in Chrome extensions
        echo "Checking manifest.json permissions..."
        if grep -q '"permissions"' manifest.json; then
          echo "✅ Permissions defined"
        else
          echo "❌ No permissions defined"
        fi
        
        # Check for excessive permissions
        if grep -q '"<all_urls>"' manifest.json; then
          echo "⚠️  Extension requests access to all URLs"
        fi
        
        # Check for eval usage (security risk)
        if grep -rq "eval(" . --exclude-dir=.git --exclude-dir=node_modules; then
          echo "⚠️  eval() usage found - potential security risk"
        else
          echo "✅ No eval() usage found"
        fi
        
        # Check for external script loading
        if grep -rq "http://" . --exclude-dir=.git --exclude-dir=node_modules; then
          echo "⚠️  HTTP URLs found - prefer HTTPS"
        else
          echo "✅ No insecure HTTP URLs found"
        fi

  build-and-package:
    runs-on: ubuntu-latest
    needs: [test, browser-test, security-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Use Node.js 24.x
      uses: actions/setup-node@v4
      with:
        node-version: 24.x
        
    - name: Build extension package
      run: |
        # Create distribution package
        mkdir -p dist
        cp -r data/ dist/
        cp -r utils/ dist/
        cp -r icons/ dist/
        cp -r settings-page/ dist/
        cp manifest.json dist/
        cp background.js dist/
        cp content.js dist/
        cp content.css dist/
        cp LICENSE dist/
        cp README.md dist/
        
        # Create zip file for Chrome Web Store
        cd dist
        zip -r ../unit-converter-extension.zip .
        cd ..
        
        echo "Extension packaged successfully"
        ls -la *.zip
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: extension-package
        path: unit-converter-extension.zip

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run code quality checks
      run: |
        echo "Running code quality analysis..."
        
        # Count lines of code
        echo "Lines of code:"
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" | xargs wc -l
        
        # Check for TODO/FIXME comments
        echo -e "\nTODOs and FIXMEs:"
        grep -rn "TODO\|FIXME" . --exclude-dir=.git --exclude-dir=node_modules || echo "None found"
        
        # Check file sizes
        echo -e "\nLarge files (>50KB):"
        find . -type f -size +50k -not -path "./node_modules/*" -not -path "./.git/*" || echo "None found"
        
        # Check for consistent indentation
        echo -e "\nChecking indentation consistency..."
        if find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" -exec grep -l "  [^ ]" {} \; | head -1; then
          echo "✅ Consistent 2-space indentation found"
        else
          echo "⚠️  Inconsistent indentation detected"
        fi
        
        echo "Code quality checks completed"
